"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLzReceiveTypesAccountsAccountDataSerializer = getLzReceiveTypesAccountsAccountDataSerializer;
exports.deserializeLzReceiveTypesAccounts = deserializeLzReceiveTypesAccounts;
exports.fetchLzReceiveTypesAccounts = fetchLzReceiveTypesAccounts;
exports.safeFetchLzReceiveTypesAccounts = safeFetchLzReceiveTypesAccounts;
exports.fetchAllLzReceiveTypesAccounts = fetchAllLzReceiveTypesAccounts;
exports.safeFetchAllLzReceiveTypesAccounts = safeFetchAllLzReceiveTypesAccounts;
exports.getLzReceiveTypesAccountsGpaBuilder = getLzReceiveTypesAccountsGpaBuilder;
exports.getLzReceiveTypesAccountsSize = getLzReceiveTypesAccountsSize;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getLzReceiveTypesAccountsAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.bytes)({ size: 8 })],
        ['store', (0, serializers_1.publicKey)()],
    ], { description: 'LzReceiveTypesAccountsAccountData' }), (value) => ({
        ...value,
        discriminator: new Uint8Array([248, 87, 167, 117, 5, 251, 21, 126]),
    }));
}
function deserializeLzReceiveTypesAccounts(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getLzReceiveTypesAccountsAccountDataSerializer());
}
async function fetchLzReceiveTypesAccounts(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'LzReceiveTypesAccounts');
    return deserializeLzReceiveTypesAccounts(maybeAccount);
}
async function safeFetchLzReceiveTypesAccounts(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeLzReceiveTypesAccounts(maybeAccount) : null;
}
async function fetchAllLzReceiveTypesAccounts(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'LzReceiveTypesAccounts');
        return deserializeLzReceiveTypesAccounts(maybeAccount);
    });
}
async function safeFetchAllLzReceiveTypesAccounts(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeLzReceiveTypesAccounts(maybeAccount));
}
function getLzReceiveTypesAccountsGpaBuilder(context) {
    const programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.bytes)({ size: 8 })],
        store: [8, (0, serializers_1.publicKey)()],
    })
        .deserializeUsing((account) => deserializeLzReceiveTypesAccounts(account))
        .whereField('discriminator', new Uint8Array([248, 87, 167, 117, 5, 251, 21, 126]));
}
function getLzReceiveTypesAccountsSize() {
    return 40;
}
