"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
// ESM shim: re-export the TypeScript source
export * from './send.ts'
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getSendInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.bytes)({ size: 8 })],
        ['dstEid', (0, serializers_1.u32)()],
        ['message', (0, serializers_1.string)()],
        ['options', (0, serializers_1.bytes)({ size: (0, serializers_1.u32)() })],
        ['nativeFee', (0, serializers_1.u64)()],
        ['lzTokenFee', (0, serializers_1.u64)()],
    ], { description: 'SendInstructionData' }), (value) => ({
        ...value,
        discriminator: new Uint8Array([102, 251, 20, 187, 65, 75, 12, 69]),
    }));
}
// Instruction.
function send(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay');
    // Accounts.
    const resolvedAccounts = {
        peer: { index: 0, isWritable: false, value: input.peer ?? null },
        store: {
            index: 1,
            isWritable: false,
            value: input.store ?? null,
        },
        endpoint: {
            index: 2,
            isWritable: false,
            value: input.endpoint ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSendInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
