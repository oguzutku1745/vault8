"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPeerConfigAccountDataSerializer = getPeerConfigAccountDataSerializer;
exports.deserializePeerConfig = deserializePeerConfig;
exports.fetchPeerConfig = fetchPeerConfig;
exports.safeFetchPeerConfig = safeFetchPeerConfig;
exports.fetchAllPeerConfig = fetchAllPeerConfig;
exports.safeFetchAllPeerConfig = safeFetchAllPeerConfig;
exports.getPeerConfigGpaBuilder = getPeerConfigGpaBuilder;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getPeerConfigAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.bytes)({ size: 8 })],
        ['peerAddress', (0, serializers_1.bytes)({ size: 32 })],
        ['enforcedOptions', (0, types_1.getEnforcedOptionsSerializer)()],
        ['bump', (0, serializers_1.u8)()],
    ], { description: 'PeerConfigAccountData' }), (value) => ({
        ...value,
        discriminator: new Uint8Array([181, 157, 86, 198, 33, 193, 94, 203]),
    }));
}
function deserializePeerConfig(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getPeerConfigAccountDataSerializer());
}
async function fetchPeerConfig(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'PeerConfig');
    return deserializePeerConfig(maybeAccount);
}
async function safeFetchPeerConfig(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializePeerConfig(maybeAccount) : null;
}
async function fetchAllPeerConfig(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'PeerConfig');
        return deserializePeerConfig(maybeAccount);
    });
}
async function safeFetchAllPeerConfig(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializePeerConfig(maybeAccount));
}
function getPeerConfigGpaBuilder(context) {
    const programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.bytes)({ size: 8 })],
        peerAddress: [8, (0, serializers_1.bytes)({ size: 32 })],
        enforcedOptions: [40, (0, types_1.getEnforcedOptionsSerializer)()],
        bump: [null, (0, serializers_1.u8)()],
    })
        .deserializeUsing((account) => deserializePeerConfig(account))
        .whereField('discriminator', new Uint8Array([181, 157, 86, 198, 33, 193, 94, 203]));
}
