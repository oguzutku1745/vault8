"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEndpointSettingsAccountDataSerializer = getEndpointSettingsAccountDataSerializer;
exports.deserializeEndpointSettings = deserializeEndpointSettings;
exports.fetchEndpointSettings = fetchEndpointSettings;
exports.safeFetchEndpointSettings = safeFetchEndpointSettings;
exports.fetchAllEndpointSettings = fetchAllEndpointSettings;
exports.safeFetchAllEndpointSettings = safeFetchAllEndpointSettings;
exports.getEndpointSettingsGpaBuilder = getEndpointSettingsGpaBuilder;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getEndpointSettingsAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.bytes)({ size: 8 })],
        ['eid', (0, serializers_1.u32)()],
        ['bump', (0, serializers_1.u8)()],
        ['admin', (0, serializers_1.publicKey)()],
        ['lzTokenMint', (0, serializers_1.option)((0, serializers_1.publicKey)())],
    ], { description: 'EndpointSettingsAccountData' }), (value) => ({
        ...value,
        discriminator: new Uint8Array([221, 232, 73, 56, 10, 66, 72, 14]),
    }));
}
function deserializeEndpointSettings(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getEndpointSettingsAccountDataSerializer());
}
async function fetchEndpointSettings(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'EndpointSettings');
    return deserializeEndpointSettings(maybeAccount);
}
async function safeFetchEndpointSettings(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeEndpointSettings(maybeAccount) : null;
}
async function fetchAllEndpointSettings(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'EndpointSettings');
        return deserializeEndpointSettings(maybeAccount);
    });
}
async function safeFetchAllEndpointSettings(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeEndpointSettings(maybeAccount));
}
function getEndpointSettingsGpaBuilder(context) {
    const programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.bytes)({ size: 8 })],
        eid: [8, (0, serializers_1.u32)()],
        bump: [12, (0, serializers_1.u8)()],
        admin: [13, (0, serializers_1.publicKey)()],
        lzTokenMint: [45, (0, serializers_1.option)((0, serializers_1.publicKey)())],
    })
        .deserializeUsing((account) => deserializeEndpointSettings(account))
        .whereField('discriminator', new Uint8Array([221, 232, 73, 56, 10, 66, 72, 14]));
}
