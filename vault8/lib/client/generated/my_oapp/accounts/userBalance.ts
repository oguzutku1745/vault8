/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  i64,
  mapSerializer,
  struct,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

/** UserBalance tracks cumulative deposits/withdrawals for each EVM user */
export type UserBalance = Account<UserBalanceAccountData>;

export type UserBalanceAccountData = {
  discriminator: Uint8Array;
  evmAddress: Array<number>;
  totalDeposited: bigint;
  totalWithdrawn: bigint;
  ftokenBalance: bigint;
  lastUpdated: bigint;
  depositCount: number;
  bump: number;
};

export type UserBalanceAccountDataArgs = {
  evmAddress: Array<number>;
  totalDeposited: number | bigint;
  totalWithdrawn: number | bigint;
  ftokenBalance: number | bigint;
  lastUpdated: number | bigint;
  depositCount: number;
  bump: number;
};

export function getUserBalanceAccountDataSerializer(): Serializer<
  UserBalanceAccountDataArgs,
  UserBalanceAccountData
> {
  return mapSerializer<UserBalanceAccountDataArgs, any, UserBalanceAccountData>(
    struct<UserBalanceAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['evmAddress', array(u8(), { size: 20 })],
        ['totalDeposited', u64()],
        ['totalWithdrawn', u64()],
        ['ftokenBalance', u64()],
        ['lastUpdated', i64()],
        ['depositCount', u32()],
        ['bump', u8()],
      ],
      { description: 'UserBalanceAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([187, 237, 208, 146, 86, 132, 29, 191]),
    })
  ) as Serializer<UserBalanceAccountDataArgs, UserBalanceAccountData>;
}

export function deserializeUserBalance(rawAccount: RpcAccount): UserBalance {
  return deserializeAccount(rawAccount, getUserBalanceAccountDataSerializer());
}

export async function fetchUserBalance(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserBalance> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'UserBalance');
  return deserializeUserBalance(maybeAccount);
}

export async function safeFetchUserBalance(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserBalance | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeUserBalance(maybeAccount) : null;
}

export async function fetchAllUserBalance(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserBalance[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'UserBalance');
    return deserializeUserBalance(maybeAccount);
  });
}

export async function safeFetchAllUserBalance(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserBalance[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeUserBalance(maybeAccount as RpcAccount));
}

export function getUserBalanceGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'myOapp',
    'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      evmAddress: Array<number>;
      totalDeposited: number | bigint;
      totalWithdrawn: number | bigint;
      ftokenBalance: number | bigint;
      lastUpdated: number | bigint;
      depositCount: number;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      evmAddress: [8, array(u8(), { size: 20 })],
      totalDeposited: [28, u64()],
      totalWithdrawn: [36, u64()],
      ftokenBalance: [44, u64()],
      lastUpdated: [52, i64()],
      depositCount: [60, u32()],
      bump: [64, u8()],
    })
    .deserializeUsing<UserBalance>((account) => deserializeUserBalance(account))
    .whereField(
      'discriminator',
      new Uint8Array([187, 237, 208, 146, 86, 132, 29, 191])
    );
}

export function getUserBalanceSize(): number {
  return 65;
}
