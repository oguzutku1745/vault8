/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidLength */
export class InvalidLengthError extends ProgramError {
  override readonly name: string = 'InvalidLength';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidLengthError);
nameToErrorMap.set('InvalidLength', InvalidLengthError);

/** BodyTooShort */
export class BodyTooShortError extends ProgramError {
  override readonly name: string = 'BodyTooShort';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('', program, cause);
  }
}
codeToErrorMap.set(0x1771, BodyTooShortError);
nameToErrorMap.set('BodyTooShort', BodyTooShortError);

/** InvalidUtf8 */
export class InvalidUtf8Error extends ProgramError {
  override readonly name: string = 'InvalidUtf8';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidUtf8Error);
nameToErrorMap.set('InvalidUtf8', InvalidUtf8Error);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getMyOappErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getMyOappErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
