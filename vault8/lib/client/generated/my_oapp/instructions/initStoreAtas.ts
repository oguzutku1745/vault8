/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitStoreAtasInstructionAccounts = {
  payer?: Signer;
  store: PublicKey | Pda;
  storeUsdcAta: PublicKey | Pda;
  storeFtokenAta: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitStoreAtasInstructionData = { discriminator: Uint8Array };

export type InitStoreAtasInstructionDataArgs = {};

export function getInitStoreAtasInstructionDataSerializer(): Serializer<
  InitStoreAtasInstructionDataArgs,
  InitStoreAtasInstructionData
> {
  return mapSerializer<
    InitStoreAtasInstructionDataArgs,
    any,
    InitStoreAtasInstructionData
  >(
    struct<InitStoreAtasInstructionData>(
      [['discriminator', bytes({ size: 8 })]],
      { description: 'InitStoreAtasInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([202, 161, 27, 3, 175, 82, 30, 248]),
    })
  ) as Serializer<
    InitStoreAtasInstructionDataArgs,
    InitStoreAtasInstructionData
  >;
}

// Instruction.
export function initStoreAtas(
  context: Pick<Context, 'payer' | 'programs'>,
  input: InitStoreAtasInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'myOapp',
    'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    store: {
      index: 1,
      isWritable: false as boolean,
      value: input.store ?? null,
    },
    storeUsdcAta: {
      index: 2,
      isWritable: true as boolean,
      value: input.storeUsdcAta ?? null,
    },
    storeFtokenAta: {
      index: 3,
      isWritable: true as boolean,
      value: input.storeFtokenAta ?? null,
    },
    tokenProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitStoreAtasInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
