/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SetJlConfigInstructionAccounts = {
  store: PublicKey | Pda;
  admin: Signer;
};

// Data.
export type SetJlConfigInstructionData = {
  discriminator: Uint8Array;
  usdcMint: PublicKey;
  tokenProgram: PublicKey;
  associatedTokenProgram: PublicKey;
  systemProgram: PublicKey;
  jlLendingProgram: PublicKey;
  jlLiquidityProgram: PublicKey;
  jlLendingAdmin: PublicKey;
  jlLending: PublicKey;
  jlFTokenMint: PublicKey;
  jlSupplyTokenReservesLiquidity: PublicKey;
  jlLendingSupplyPositionOnLiquidity: PublicKey;
  jlRateModel: PublicKey;
  jlVault: PublicKey;
  jlLiquidity: PublicKey;
  jlRewardsRateModel: PublicKey;
};

export type SetJlConfigInstructionDataArgs = {
  usdcMint: PublicKey;
  tokenProgram: PublicKey;
  associatedTokenProgram: PublicKey;
  systemProgram: PublicKey;
  jlLendingProgram: PublicKey;
  jlLiquidityProgram: PublicKey;
  jlLendingAdmin: PublicKey;
  jlLending: PublicKey;
  jlFTokenMint: PublicKey;
  jlSupplyTokenReservesLiquidity: PublicKey;
  jlLendingSupplyPositionOnLiquidity: PublicKey;
  jlRateModel: PublicKey;
  jlVault: PublicKey;
  jlLiquidity: PublicKey;
  jlRewardsRateModel: PublicKey;
};

export function getSetJlConfigInstructionDataSerializer(): Serializer<
  SetJlConfigInstructionDataArgs,
  SetJlConfigInstructionData
> {
  return mapSerializer<
    SetJlConfigInstructionDataArgs,
    any,
    SetJlConfigInstructionData
  >(
    struct<SetJlConfigInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['usdcMint', publicKeySerializer()],
        ['tokenProgram', publicKeySerializer()],
        ['associatedTokenProgram', publicKeySerializer()],
        ['systemProgram', publicKeySerializer()],
        ['jlLendingProgram', publicKeySerializer()],
        ['jlLiquidityProgram', publicKeySerializer()],
        ['jlLendingAdmin', publicKeySerializer()],
        ['jlLending', publicKeySerializer()],
        ['jlFTokenMint', publicKeySerializer()],
        ['jlSupplyTokenReservesLiquidity', publicKeySerializer()],
        ['jlLendingSupplyPositionOnLiquidity', publicKeySerializer()],
        ['jlRateModel', publicKeySerializer()],
        ['jlVault', publicKeySerializer()],
        ['jlLiquidity', publicKeySerializer()],
        ['jlRewardsRateModel', publicKeySerializer()],
      ],
      { description: 'SetJlConfigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([161, 155, 100, 93, 114, 7, 209, 112]),
    })
  ) as Serializer<SetJlConfigInstructionDataArgs, SetJlConfigInstructionData>;
}

// Args.
export type SetJlConfigInstructionArgs = SetJlConfigInstructionDataArgs;

// Instruction.
export function setJlConfig(
  context: Pick<Context, 'programs'>,
  input: SetJlConfigInstructionAccounts & SetJlConfigInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'myOapp',
    'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay'
  );

  // Accounts.
  const resolvedAccounts = {
    store: {
      index: 0,
      isWritable: true as boolean,
      value: input.store ?? null,
    },
    admin: {
      index: 1,
      isWritable: false as boolean,
      value: input.admin ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetJlConfigInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetJlConfigInstructionDataSerializer().serialize(
    resolvedArgs as SetJlConfigInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
