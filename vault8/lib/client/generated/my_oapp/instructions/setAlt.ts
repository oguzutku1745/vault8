/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SetAltInstructionAccounts = {
  store: PublicKey | Pda;
  lzReceiveTypesAccounts: PublicKey | Pda;
  alt: PublicKey | Pda;
  admin: Signer;
};

// Data.
export type SetAltInstructionData = { discriminator: Uint8Array };

export type SetAltInstructionDataArgs = {};

export function getSetAltInstructionDataSerializer(): Serializer<
  SetAltInstructionDataArgs,
  SetAltInstructionData
> {
  return mapSerializer<SetAltInstructionDataArgs, any, SetAltInstructionData>(
    struct<SetAltInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'SetAltInstructionData',
    }),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([124, 193, 229, 78, 223, 34, 84, 12]),
    })
  ) as Serializer<SetAltInstructionDataArgs, SetAltInstructionData>;
}

// Instruction.
export function setAlt(
  context: Pick<Context, 'programs'>,
  input: SetAltInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'myOapp',
    'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay'
  );

  // Accounts.
  const resolvedAccounts = {
    store: {
      index: 0,
      isWritable: false as boolean,
      value: input.store ?? null,
    },
    lzReceiveTypesAccounts: {
      index: 1,
      isWritable: true as boolean,
      value: input.lzReceiveTypesAccounts ?? null,
    },
    alt: { index: 2, isWritable: false as boolean, value: input.alt ?? null },
    admin: {
      index: 3,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetAltInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
