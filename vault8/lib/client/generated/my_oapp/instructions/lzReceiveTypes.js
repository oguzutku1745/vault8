"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLzReceiveTypesInstructionDataSerializer = getLzReceiveTypesInstructionDataSerializer;
exports.lzReceiveTypes = lzReceiveTypes;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getLzReceiveTypesInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.bytes)({ size: 8 })],
        ['params', (0, types_1.getLzReceiveParamsSerializer)()],
    ], { description: 'LzReceiveTypesInstructionData' }), (value) => ({
        ...value,
        discriminator: new Uint8Array([221, 17, 246, 159, 248, 128, 31, 96]),
    }));
}
// Instruction.
function lzReceiveTypes(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay');
    // Accounts.
    const resolvedAccounts = {
        store: {
            index: 0,
            isWritable: false,
            value: input.store ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getLzReceiveTypesInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
