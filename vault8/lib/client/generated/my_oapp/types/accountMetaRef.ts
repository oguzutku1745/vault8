/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Serializer, bool, struct } from '@metaplex-foundation/umi/serializers';
import {
  AddressLocator,
  AddressLocatorArgs,
  getAddressLocatorSerializer,
} from '.';

/**
 * Account metadata for V2 execution planning.
 * Used by the Executor to construct the final transaction.
 *
 * V2 removes the legacy is_signer flag from V1's AccountMeta.
 * Instead, signer roles are explicitly declared through AddressLocator variants.
 * This provides clearer semantics and enables multiple signer support.
 */

export type AccountMetaRef = {
  /** The account address locator - supports multiple resolution strategies */
  pubkey: AddressLocator;
  /** Whether the account should be writable in the final transaction */
  isWritable: boolean;
};

export type AccountMetaRefArgs = {
  /** The account address locator - supports multiple resolution strategies */
  pubkey: AddressLocatorArgs;
  /** Whether the account should be writable in the final transaction */
  isWritable: boolean;
};

export function getAccountMetaRefSerializer(): Serializer<
  AccountMetaRefArgs,
  AccountMetaRef
> {
  return struct<AccountMetaRef>(
    [
      ['pubkey', getAddressLocatorSerializer()],
      ['isWritable', bool()],
    ],
    { description: 'AccountMetaRef' }
  ) as Serializer<AccountMetaRefArgs, AccountMetaRef>;
}
