"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLzReceiveInstructionDataSerializer = getLzReceiveInstructionDataSerializer;
exports.lzReceive = lzReceive;
var umi_1 = require("@metaplex-foundation/umi");
var serializers_1 = require("@metaplex-foundation/umi/serializers");
var shared_1 = require("../shared");
var types_1 = require("../types");
function getLzReceiveInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.bytes)({ size: 8 })],
        ['params', (0, types_1.getLzReceiveParamsSerializer)()],
    ], { description: 'LzReceiveInstructionData' }), function (value) { return (__assign(__assign({}, value), { discriminator: new Uint8Array([8, 179, 120, 109, 33, 118, 189, 80]) })); });
}
// Instruction.
function lzReceive(context, input) {
    var _a, _b;
    // Program ID.
    var programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay');
    // Accounts.
    var resolvedAccounts = {
        store: {
            index: 0,
            isWritable: true,
            value: (_a = input.store) !== null && _a !== void 0 ? _a : null,
        },
        peer: { index: 1, isWritable: false, value: (_b = input.peer) !== null && _b !== void 0 ? _b : null },
    };
    // Arguments.
    var resolvedArgs = __assign({}, input);
    // Accounts in order.
    var orderedAccounts = Object.values(resolvedAccounts).sort(function (a, b) { return a.index - b.index; });
    // Keys and Signers.
    var _c = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId), keys = _c[0], signers = _c[1];
    // Data.
    var data = getLzReceiveInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    var bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([{ instruction: { keys: keys, programId: programId, data: data }, signers: signers, bytesCreatedOnChain: bytesCreatedOnChain }]);
}
