"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidMessageTypeError = void 0;
exports.getMyOappErrorFromCode = getMyOappErrorFromCode;
exports.getMyOappErrorFromName = getMyOappErrorFromName;
var umi_1 = require("@metaplex-foundation/umi");
var codeToErrorMap = new Map();
var nameToErrorMap = new Map();
/** InvalidMessageType */
var InvalidMessageTypeError = /** @class */ (function (_super) {
    __extends(InvalidMessageTypeError, _super);
    function InvalidMessageTypeError(program, cause) {
        var _this = _super.call(this, '', program, cause) || this;
        _this.name = 'InvalidMessageType';
        _this.code = 0x1770; // 6000
        return _this;
    }
    return InvalidMessageTypeError;
}(umi_1.ProgramError));
exports.InvalidMessageTypeError = InvalidMessageTypeError;
codeToErrorMap.set(0x1770, InvalidMessageTypeError);
nameToErrorMap.set('InvalidMessageType', InvalidMessageTypeError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMyOappErrorFromCode(code, program, cause) {
    var constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMyOappErrorFromName(name, program, cause) {
    var constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
