"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPeerConfigParamSerializer = getPeerConfigParamSerializer;
exports.peerConfigParam = peerConfigParam;
exports.isPeerConfigParam = isPeerConfigParam;
var serializers_1 = require("@metaplex-foundation/umi/serializers");
function getPeerConfigParamSerializer() {
    return (0, serializers_1.dataEnum)([
        [
            'PeerAddress',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, serializers_1.bytes)({ size: 32 })])],
            ]),
        ],
        [
            'EnforcedOptions',
            (0, serializers_1.struct)([
                ['send', (0, serializers_1.bytes)({ size: (0, serializers_1.u32)() })],
                ['sendAndCall', (0, serializers_1.bytes)({ size: (0, serializers_1.u32)() })],
            ]),
        ],
    ], { description: 'PeerConfigParam' });
}
function peerConfigParam(kind, data) {
    return Array.isArray(data) ? { __kind: kind, fields: data } : __assign({ __kind: kind }, (data !== null && data !== void 0 ? data : {}));
}
function isPeerConfigParam(kind, value) {
    return value.__kind === kind;
}
