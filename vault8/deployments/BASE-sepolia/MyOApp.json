{
  "address": "0x0D7FBc907154De84897d9E0Db4B99C391A529488",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cctpTokenMessenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "cctpNonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        }
      ],
      "name": "CctpDepositInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        }
      ],
      "name": "DepositFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FAST_TRANSFER_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SOLANA_DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STORE_SOLANA_USDC_ATA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cctpDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cctpNonces",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cctpTokenMessenger",
      "outputs": [
        {
          "internalType": "contract ICCTPTokenMessengerV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "data",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositViaCCTP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPendingDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lzCompose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pendingSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_by",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteIncrement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "requestDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_by",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "requestIncrement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x408809b888ad177ad46ed2fa88d4bc7b019744623dc48a73f1dbf00dd873fcb2",
  "receipt": {
    "to": null,
    "from": "0x79B7931d9bb01e58beAE970e1dd74146317aa667",
    "contractAddress": "0x0D7FBc907154De84897d9E0Db4B99C391A529488",
    "transactionIndex": 14,
    "gasUsed": "2485744",
    "logsBloom": "0x
    "blockHash": "0xb2157cbe7b79631440a03c9a2911753ba1decdae1f1e2aadcdd43835f1d78eff",
    "transactionHash": "0x408809b888ad177ad46ed2fa88d4bc7b019744623dc48a73f1dbf00dd873fcb2",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 32697064,
        "transactionHash": "0x408809b888ad177ad46ed2fa88d4bc7b019744623dc48a73f1dbf00dd873fcb2",
        "address": "0x0D7FBc907154De84897d9E0Db4B99C391A529488",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000079b7931d9bb01e58beae970e1dd74146317aa667"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xb2157cbe7b79631440a03c9a2911753ba1decdae1f1e2aadcdd43835f1d78eff"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 32697064,
        "transactionHash": "0x408809b888ad177ad46ed2fa88d4bc7b019744623dc48a73f1dbf00dd873fcb2",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x0000000000000000000000000d7fbc907154de84897d9e0db4b99c391a52948800000000000000000000000079b7931d9bb01e58beae970e1dd74146317aa667",
        "logIndex": 16,
        "blockHash": "0xb2157cbe7b79631440a03c9a2911753ba1decdae1f1e2aadcdd43835f1d78eff"
      }
    ],
    "blockNumber": 32697064,
    "cumulativeGasUsed": "3541233",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0x79B7931d9bb01e58beAE970e1dd74146317aa667",
    "0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA",
    "0x036CbD53842c5426634e7929541eC2318f3dCF7e"
  ],
  "numDeployments": 26,
  "solcInputHash": "c0e9a8c5f2a75c76818fc71a5e89f320",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cctpTokenMessenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"cctpNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"name\":\"CctpDepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FAST_TRANSFER_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORE_SOLANA_USDC_ATA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cctpDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cctpNonces\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cctpTokenMessenger\",\"outputs\":[{\"internalType\":\"contract ICCTPTokenMessengerV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositViaCCTP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_by\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteIncrement\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"requestDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_by\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"requestIncrement\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"CctpDepositInitiated(address,uint256,uint256,uint256,uint64,uint32)\":{\"params\":{\"cctpNonce\":\"CCTP nonce for attestation tracking\",\"depositAmount\":\"Amount of USDC deposited by user (before fees)\",\"destinationDomain\":\"CCTP destination domain (Solana = 5)\",\"fee\":\"CCTP Fast Transfer fee charged\",\"mintedAmount\":\"Amount of USDC that will be minted on Solana (after fees)\",\"user\":\"Address of the depositor\"}},\"DepositFinalized(address,uint256,uint32,bytes32)\":{\"params\":{\"amount\":\"Amount sent via LayerZero\",\"dstEid\":\"LayerZero destination endpoint ID\",\"guid\":\"LayerZero message GUID\",\"user\":\"Address of the depositor\"}}},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"depositViaCCTP(uint256)\":{\"details\":\"Combines: transferFrom \\u2192 approve \\u2192 depositForBurnCalculates actual minted amount after CCTP Fast Transfer fee (1 bps = 0.01%)\",\"params\":{\"_amount\":\"Amount of USDC to bridge to Solana (before fees)\"},\"returns\":{\"_0\":\"nonce CCTP nonce for tracking the cross-chain message\"}},\"getPendingDeposit(address)\":{\"params\":{\"_user\":\"User address to check\"},\"returns\":{\"amount\":\"Pending CCTP deposit amount\",\"nonce\":\"CCTP nonce of the deposit\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteDeposit(uint32,bytes,bool)\":{\"details\":\"Quotes based on the user's pending CCTP deposit amount\",\"params\":{\"_dstEid\":\"LayerZero destination endpoint ID\",\"_options\":\"LayerZero execution options\",\"_payInLzToken\":\"Whether to pay fee in LZ token\"},\"returns\":{\"fee\":\"Estimated messaging fee\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"requestDeposit(uint32,bytes)\":{\"details\":\"User signs this transaction AFTER bot has submitted CCTP attestation on Solana.This function uses the amount from the user's CCTP deposit (security: prevents amount mismatch).If user has NO pending CCTP deposit, this function acts as legacy direct deposit (for testing).\",\"params\":{\"_dstEid\":\"LayerZero destination endpoint ID (Solana = 40168)\",\"_options\":\"LayerZero execution options (gas, etc.)\"},\"returns\":{\"receipt\":\"LayerZero messaging receipt\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"FAST_TRANSFER_THRESHOLD\":{\"details\":\"1000 = Confirmed (~10-30 seconds), 2000 = Finalized (~13-19 minutes)\"},\"MIN_FEE\":{\"details\":\"Base Sepolia Fast Transfer fee: 1 bps (0.01%) = 100_000 in 1/1000 basis pointsFee formula: fee = (amount * MIN_FEE) / MIN_FEE_MULTIPLIER\"},\"SOLANA_DOMAIN\":{\"details\":\"Solana domain: 5\"},\"STORE_SOLANA_USDC_ATA\":{\"details\":\"Base58: MHso38U1uo8br3gSU6bXKC8apXorKzfwPqMVgYaKCmaHex: 0x0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a5NO CONVERSION NEEDED! Solana addresses are already 32 bytes. Pass directly to depositForBurn.\"},\"cctpDeposits\":{\"details\":\"This is the net amount user will receive on Solana (depositAmount - cctpFee)Security: Ensures user can only send LayerZero message for amount they actually receive\"},\"cctpNonces\":{\"details\":\"Used for bot to correlate CCTP attestation with user\"},\"cctpTokenMessenger\":{\"details\":\"Base Sepolia TokenMessengerV2: 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAAThis is the contract we need to approve USDC for (it calls transferFrom)\"},\"usdc\":{\"details\":\"Base Sepolia USDC: 0x036CbD53842c5426634e7929541eC2318f3dCF7e\"}},\"version\":1},\"userdoc\":{\"events\":{\"CctpDepositInitiated(address,uint256,uint256,uint256,uint64,uint32)\":{\"notice\":\"Emitted when user initiates CCTP deposit\"},\"DepositFinalized(address,uint256,uint32,bytes32)\":{\"notice\":\"Emitted when user finalizes deposit by sending LayerZero message\"}},\"kind\":\"user\",\"methods\":{\"FAST_TRANSFER_THRESHOLD()\":{\"notice\":\"Fast Transfer finality threshold for CCTP V2\"},\"MIN_FEE()\":{\"notice\":\"CCTP V2 Fee Calculation Constants\"},\"SOLANA_DOMAIN()\":{\"notice\":\"Solana domain identifier for CCTP V2\"},\"STORE_SOLANA_USDC_ATA()\":{\"notice\":\"Store's USDC ATA on Solana (hex-encoded 32-byte address)\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"cctpDeposits(address)\":{\"notice\":\"Track CCTP deposits: user => ACTUAL amount that will be minted on Solana (after fees)\"},\"cctpNonces(address)\":{\"notice\":\"Track CCTP nonces for each user's deposit\"},\"cctpTokenMessenger()\":{\"notice\":\"Circle's CCTP V2 TokenMessenger contract on Base Sepolia\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"depositViaCCTP(uint256)\":{\"notice\":\"Complete CCTP deposit flow in one transaction\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"getPendingDeposit(address)\":{\"notice\":\"Get the pending CCTP deposit amount for a user\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quoteDeposit(uint32,bytes,bool)\":{\"notice\":\"Quote the LayerZero fee for requestDeposit\"},\"requestDeposit(uint32,bytes)\":{\"notice\":\"Step 2: Send LayerZero message to finalize deposit on Solana\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"usdc()\":{\"notice\":\"USDC token contract on Base Sepolia\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyOApp.sol\":\"MyOApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/MyOApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { CounterMsgCodec } from \\\"./libs/CounterMsgCodec.sol\\\";\\n\\n/**\\n * @title CCTP V2 Token Messenger Interface\\n * @notice Circle's CCTP V2 interface for burning tokens on source chain with Fast Transfer support\\n * @dev Documentation: https://developers.circle.com/cctp/evm-smart-contracts\\n */\\ninterface ICCTPTokenMessengerV2 {\\n    /**\\n     * @notice Deposits and burns tokens from sender to be minted on destination domain (CCTP V2)\\n     * @param amount Amount of tokens to burn\\n     * @param destinationDomain Destination domain identifier\\n     * @param mintRecipient Address receiving minted tokens on destination (bytes32 format)\\n     * @param burnToken Address of token to burn\\n     * @param destinationCaller Address that can call receiveMessage on destination (bytes32(0) = anyone)\\n     * @param maxFee Maximum fee paid for fast burn in units of burnToken\\n     * @param minFinalityThreshold Minimum finality threshold (1000 = Fast Transfer, 2000 = Standard)\\n     * @return nonce Unique nonce reserved by message\\n     */\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller,\\n        uint256 maxFee,\\n        uint32 minFinalityThreshold\\n    ) external returns (uint64 nonce);\\n}\\n\\ncontract MyOApp is OApp, OAppOptionsType3 {\\n    using CounterMsgCodec for bytes;\\n    using SafeERC20 for IERC20;\\n\\n    // For legacy UI/debugging\\n    string public data = \\\"Nothing received yet.\\\";\\n    // Counter updated via compose ACK from Solana\\n    uint64 public counter;\\n\\n    // Balances credited on ACK; maps beneficiary to credited amount\\n    mapping(address => uint256) public balances;\\n    // Correlate outgoing message GUID -> original sender to credit on ACK\\n    mapping(bytes32 => address) public pendingSender;\\n\\n    // ==================== CCTP V2 Configuration ====================\\n    \\n    /// @notice Circle's CCTP V2 TokenMessenger contract on Base Sepolia\\n    /// @dev Base Sepolia TokenMessengerV2: 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA\\n    /// @dev This is the contract we need to approve USDC for (it calls transferFrom)\\n    ICCTPTokenMessengerV2 public immutable cctpTokenMessenger;\\n    \\n    /// @notice USDC token contract on Base Sepolia\\n    /// @dev Base Sepolia USDC: 0x036CbD53842c5426634e7929541eC2318f3dCF7e\\n    IERC20 public immutable usdc;\\n    \\n    /// @notice Solana domain identifier for CCTP V2\\n    /// @dev Solana domain: 5\\n    uint32 public constant SOLANA_DOMAIN = 5;\\n    \\n    /// @notice Fast Transfer finality threshold for CCTP V2\\n    /// @dev 1000 = Confirmed (~10-30 seconds), 2000 = Finalized (~13-19 minutes)\\n    uint32 public constant FAST_TRANSFER_THRESHOLD = 1000;\\n    \\n    /// @notice Store's USDC ATA on Solana (hex-encoded 32-byte address)\\n    /// @dev Base58: MHso38U1uo8br3gSU6bXKC8apXorKzfwPqMVgYaKCma\\n    /// @dev Hex: 0x0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a5\\n    /// @dev NO CONVERSION NEEDED! Solana addresses are already 32 bytes. Pass directly to depositForBurn.\\n    bytes32 public constant STORE_SOLANA_USDC_ATA = 0x0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a5;\\n    \\n    /// @notice CCTP V2 Fee Calculation Constants\\n    /// @dev Base Sepolia Fast Transfer fee: 1 bps (0.01%) = 100_000 in 1/1000 basis points\\n    /// @dev Fee formula: fee = (amount * MIN_FEE) / MIN_FEE_MULTIPLIER\\n    uint256 public constant MIN_FEE = 100_000; // 1 bps = 0.01%\\n    uint256 public constant MIN_FEE_MULTIPLIER = 10_000_000;\\n    \\n    /// @notice Track CCTP deposits: user => ACTUAL amount that will be minted on Solana (after fees)\\n    /// @dev This is the net amount user will receive on Solana (depositAmount - cctpFee)\\n    /// @dev Security: Ensures user can only send LayerZero message for amount they actually receive\\n    mapping(address => uint256) public cctpDeposits;\\n    \\n    /// @notice Track CCTP nonces for each user's deposit\\n    /// @dev Used for bot to correlate CCTP attestation with user\\n    mapping(address => uint64) public cctpNonces;\\n    \\n    // ==================== Events ====================\\n    \\n    /// @notice Emitted when user initiates CCTP deposit\\n    /// @param user Address of the depositor\\n    /// @param depositAmount Amount of USDC deposited by user (before fees)\\n    /// @param mintedAmount Amount of USDC that will be minted on Solana (after fees)\\n    /// @param fee CCTP Fast Transfer fee charged\\n    /// @param cctpNonce CCTP nonce for attestation tracking\\n    /// @param destinationDomain CCTP destination domain (Solana = 5)\\n    event CctpDepositInitiated(\\n        address indexed user,\\n        uint256 depositAmount,\\n        uint256 mintedAmount,\\n        uint256 fee,\\n        uint64 indexed cctpNonce,\\n        uint32 destinationDomain\\n    );\\n    \\n    /// @notice Emitted when user finalizes deposit by sending LayerZero message\\n    /// @param user Address of the depositor\\n    /// @param amount Amount sent via LayerZero\\n    /// @param dstEid LayerZero destination endpoint ID\\n    /// @param guid LayerZero message GUID\\n    event DepositFinalized(\\n        address indexed user,\\n        uint256 amount,\\n        uint32 indexed dstEid,\\n        bytes32 indexed guid\\n    );\\n\\n    // Note: OApp inherits ownership; pass through Ownable initializer via the most-derived constructor\\n    constructor(\\n        address _endpoint,\\n        address _delegate,\\n        address _cctpTokenMessenger,\\n        address _usdc\\n    ) OApp(_endpoint, _delegate) Ownable(_delegate) {\\n        require(_cctpTokenMessenger != address(0), \\\"Invalid CCTP messenger\\\");\\n        require(_usdc != address(0), \\\"Invalid USDC address\\\");\\n        cctpTokenMessenger = ICCTPTokenMessengerV2(_cctpTokenMessenger);\\n        usdc = IERC20(_usdc);\\n    }\\n\\n    // Type-3: request an increment on Solana; msg.value must cover both lzReceive and compose budgets\\n    function requestIncrement(\\n        uint32 _dstEid,\\n        uint64 _by,\\n        bytes calldata _options\\n    ) external payable returns (MessagingReceipt memory receipt) {\\n        bytes memory payload = CounterMsgCodec.encIncrement(_by);\\n        bytes memory options = combineOptions(_dstEid, /*msgType*/ 1, _options);\\n        receipt = _lzSend(_dstEid, payload, options, MessagingFee(msg.value, 0), payable(msg.sender));\\n    }\\n\\n    function quoteIncrement(\\n        uint32 _dstEid,\\n        uint64 _by,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory fee) {\\n        bytes memory payload = CounterMsgCodec.encIncrement(_by);\\n        bytes memory options = combineOptions(_dstEid, /*msgType*/ 1, _options);\\n        return _quote(_dstEid, payload, options, _payInLzToken);\\n    }\\n\\n    // Build 8-byte little-endian payload from uint64\\n    function _toLeBytes8(uint64 x) internal pure returns (bytes memory out) {\\n        out = new bytes(8);\\n        uint64 v = x;\\n        for (uint256 i = 0; i < 8; i++) {\\n            out[i] = bytes1(uint8(v & 0xFF));\\n            v >>= 8;\\n        }\\n    }\\n\\n    // ==================== CCTP Functions ====================\\n    \\n    /**\\n     * @notice Complete CCTP deposit flow in one transaction\\n     * @dev Combines: transferFrom \\u2192 approve \\u2192 depositForBurn\\n     * @dev Calculates actual minted amount after CCTP Fast Transfer fee (1 bps = 0.01%)\\n     * @param _amount Amount of USDC to bridge to Solana (before fees)\\n     * @return nonce CCTP nonce for tracking the cross-chain message\\n     */\\n    function depositViaCCTP(uint256 _amount) external returns (uint64) {\\n        require(_amount > 0, \\\"Amount must be nonzero\\\");\\n        \\n        // Calculate CCTP Fast Transfer fee (1 bps = 0.01%)\\n        // Fee = (amount * MIN_FEE) / MIN_FEE_MULTIPLIER\\n        // For 1 USDC (1,000,000 units): fee = (1,000,000 * 100,000) / 10,000,000 = 10,000 = 0.01 USDC\\n        uint256 cctpFee = (_amount * MIN_FEE) / MIN_FEE_MULTIPLIER;\\n        uint256 mintedAmount = _amount - cctpFee;\\n        \\n        require(mintedAmount > 0, \\\"Amount too small (fee >= amount)\\\");\\n        \\n        // Step 1: Transfer USDC from user to this contract\\n        usdc.safeTransferFrom(msg.sender, address(this), _amount);\\n        \\n        // Step 2: Approve CCTP TokenMessenger to spend our USDC\\n        bool approveSuccess = usdc.approve(address(cctpTokenMessenger), _amount);\\n        require(approveSuccess, \\\"CCTP approval failed\\\");\\n        \\n        // Step 3: Call CCTP depositForBurn\\n        // maxFee must be >= cctpFee, we use the calculated fee\\n        bytes memory data = abi.encodeWithSelector(\\n            0x8e0250ee,  // depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)\\n            _amount,\\n            SOLANA_DOMAIN,\\n            STORE_SOLANA_USDC_ATA,\\n            address(usdc),\\n            bytes32(0),\\n            cctpFee,  // Use the exact calculated fee as maxFee\\n            FAST_TRANSFER_THRESHOLD\\n        );\\n        \\n        (bool success, bytes memory result) = address(cctpTokenMessenger).call(data);\\n        require(success, \\\"depositForBurn failed\\\");\\n        \\n        // CCTP V2 depositForBurn returns uint64 nonce\\n        uint64 nonce = 0;\\n        if (result.length > 0) {\\n            nonce = abi.decode(result, (uint64));\\n        }\\n        \\n        // Store the ACTUAL minted amount (after fees) for this user\\n        cctpDeposits[msg.sender] = mintedAmount;\\n        cctpNonces[msg.sender] = nonce;\\n        \\n        emit CctpDepositInitiated(msg.sender, _amount, mintedAmount, cctpFee, nonce, SOLANA_DOMAIN);\\n        return nonce;\\n    }\\n\\n    // ==================== LayerZero Functions ====================\\n\\n    /**\\n     * @notice Get the pending CCTP deposit amount for a user\\n     * @param _user User address to check\\n     * @return amount Pending CCTP deposit amount\\n     * @return nonce CCTP nonce of the deposit\\n     */\\n    function getPendingDeposit(address _user) external view returns (uint256 amount, uint64 nonce) {\\n        return (cctpDeposits[_user], cctpNonces[_user]);\\n    }\\n\\n    // ==================== LayerZero Functions ====================\\n\\n    /**\\n     * @notice Step 2: Send LayerZero message to finalize deposit on Solana\\n     * @dev User signs this transaction AFTER bot has submitted CCTP attestation on Solana.\\n     * @dev This function uses the amount from the user's CCTP deposit (security: prevents amount mismatch).\\n     * @dev If user has NO pending CCTP deposit, this function acts as legacy direct deposit (for testing).\\n     * @param _dstEid LayerZero destination endpoint ID (Solana = 40168)\\n     * @param _options LayerZero execution options (gas, etc.)\\n     * @return receipt LayerZero messaging receipt\\n     */\\n    function requestDeposit(\\n        uint32 _dstEid,\\n        bytes calldata _options\\n    ) external payable returns (MessagingReceipt memory receipt) {\\n        // Get amount from user's CCTP deposit\\n        uint256 amount = cctpDeposits[msg.sender];\\n        require(amount > 0, \\\"No pending CCTP deposit. Call depositViaCCTP first.\\\");\\n        require(amount <= type(uint64).max, \\\"Amount exceeds uint64 max\\\");\\n        \\n        // Build 36-byte payload: [amount:8][evm_address:20][cctp_nonce:8]\\n        bytes memory payload = abi.encodePacked(\\n            _toLeBytes8(uint64(amount)),           // 8 bytes: amount (little-endian)\\n            msg.sender,                             // 20 bytes: EVM address\\n            _toLeBytes8(cctpNonces[msg.sender])    // 8 bytes: CCTP nonce (little-endian)\\n        );\\n        \\n        bytes memory options = combineOptions(_dstEid, /*msgType*/ 1, _options);\\n        receipt = _lzSend(_dstEid, payload, options, MessagingFee(msg.value, 0), payable(msg.sender));\\n        \\n        // Track sender by GUID for bot to correlate with Solana DepositEvent\\n        pendingSender[receipt.guid] = msg.sender;\\n        \\n        // Clear user's CCTP deposit (security: prevents replay)\\n        delete cctpDeposits[msg.sender];\\n        delete cctpNonces[msg.sender];\\n        \\n        emit DepositFinalized(msg.sender, amount, _dstEid, receipt.guid);\\n        \\n        return receipt;\\n    }\\n\\n    /**\\n     * @notice Quote the LayerZero fee for requestDeposit\\n     * @dev Quotes based on the user's pending CCTP deposit amount\\n     * @param _dstEid LayerZero destination endpoint ID\\n     * @param _options LayerZero execution options\\n     * @param _payInLzToken Whether to pay fee in LZ token\\n     * @return fee Estimated messaging fee\\n     */\\n    function quoteDeposit(\\n        uint32 _dstEid,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory fee) {\\n        // Get user's pending CCTP deposit amount\\n        uint256 amount = cctpDeposits[msg.sender];\\n        require(amount > 0, \\\"No pending CCTP deposit\\\");\\n        require(amount <= type(uint64).max, \\\"Amount exceeds uint64 max\\\");\\n        \\n        // Build same 36-byte payload for accurate fee quote\\n        bytes memory payload = abi.encodePacked(\\n            _toLeBytes8(uint64(amount)),\\n            msg.sender,\\n            _toLeBytes8(cctpNonces[msg.sender])\\n        );\\n        bytes memory options = combineOptions(_dstEid, /*msgType*/ 1, _options);\\n        return _quote(_dstEid, payload, options, _payInLzToken);\\n    }\\n\\n    // Not used for this flow; kept for compatibility with message-only paths\\n    function _lzReceive(\\n        Origin calldata /*origin*/,\\n        bytes32 /*guid*/,\\n        bytes calldata payload,\\n        address /*executor*/,\\n        bytes calldata /*extra*/\\n    ) internal override {\\n        // Decode legacy string if present\\n        // no-op for counter flow\\n        data = string(payload);\\n    }\\n\\n    // External compose callback entrypoint (ACK from Solana). Called by the LayerZero Endpoint.\\n    // Signature compatible with ILayerZeroComposer in the installed protocol version.\\n    function lzCompose(\\n        address /*_from*/,\\n        address /*_to*/,\\n        bytes32 guid,\\n        uint16 /*_index*/,\\n        bytes calldata payload,\\n        bytes calldata /*_extraData*/\\n    ) external payable {\\n        // Only the LayerZero Endpoint can call compose callbacks\\n        require(msg.sender == address(endpoint), \\\"LZ: caller not endpoint\\\");\\n\\n        uint64 amount = 0;\\n        if (payload.length == 9 && uint8(payload[0]) == CounterMsgCodec.OPCODE_ACK) {\\n            // decode little-endian u64 from payload[1..8]\\n            for (uint256 i = 0; i < 8; i++) {\\n                amount |= uint64(uint8(payload[1 + i])) << uint64(8 * i);\\n            }\\n            counter = amount; // keep legacy counter behavior for UI\\n        } else if (payload.length == 8) {\\n            // raw 8-byte LE amount\\n            for (uint256 i = 0; i < 8; i++) {\\n                amount |= uint64(uint8(payload[i])) << uint64(8 * i);\\n            }\\n            counter = amount; // also mirror to counter for compatibility\\n        }\\n\\n        // Credit the original sender if the message GUID is known\\n        address beneficiary = pendingSender[guid];\\n        if (beneficiary != address(0)) {\\n            delete pendingSender[guid];\\n            balances[beneficiary] += amount;\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0x5b74fcf9603a5e558c2d1146e9e9232cec634598c58e2434a655d097480e3992\",\"license\":\"MIT\"},\"contracts/libs/CounterMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Simple opcode + u64 codec for counter demo\\nlibrary CounterMsgCodec {\\n    uint8 internal constant OPCODE_INCREMENT = 1; // payload: uint64 by\\n    uint8 internal constant OPCODE_ACK = 2;       // payload: uint64 newCount\\n\\n    function encIncrement(uint64 by) internal pure returns (bytes memory) {\\n        return abi.encodePacked(OPCODE_INCREMENT, by);\\n    }\\n\\n    function encAck(uint64 newCount) internal pure returns (bytes memory) {\\n        return abi.encodePacked(OPCODE_ACK, newCount);\\n    }\\n\\n    function dec(bytes calldata payload) internal pure returns (uint8 opcode, uint64 value) {\\n        opcode = uint8(payload[0]);\\n        value = abi.decode(payload[1:], (uint64));\\n    }\\n}\\n\",\"keccak256\":\"0xcc7ed10c0cf9512ef006979bd1380d0f2187adc4086636218e2bfdb5175f2902\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052601560e09081527f4e6f7468696e67207265636569766564207965742e00000000000000000000006101005260039062000040908262000309565b503480156200004e57600080fd5b5060405162002f3c38038062002f3c8339810160408190526200007191620003f2565b83838181806001600160a01b038116620000a657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000b18162000212565b506001600160a01b038083166080528116620000e057604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b1580156200012857600080fd5b505af11580156200013d573d6000803e3d6000fd5b5050506001600160a01b03871694506200019f93505050505760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642043435450206d657373656e6765720000000000000000000060448201526064016200009d565b6001600160a01b038116620001f75760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642055534443206164647265737300000000000000000000000060448201526064016200009d565b6001600160a01b0391821660a0521660c052506200044f9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200028d57607f821691505b602082108103620002ae57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000304576000816000526020600020601f850160051c81016020861015620002df5750805b601f850160051c820191505b818110156200030057828155600101620002eb565b5050505b505050565b81516001600160401b0381111562000325576200032562000262565b6200033d8162000336845462000278565b84620002b4565b602080601f8311600181146200037557600084156200035c5750858301515b600019600386901b1c1916600185901b17855562000300565b600085815260208120601f198616915b82811015620003a65788860151825594840194600190910190840162000385565b5085821015620003c55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80516001600160a01b0381168114620003ed57600080fd5b919050565b600080600080608085870312156200040957600080fd5b6200041485620003d5565b93506200042460208601620003d5565b92506200043460408601620003d5565b91506200044460608601620003d5565b905092959194509250565b60805160a05160c051612a69620004d36000396000818161035e01528181610975015281816109e60152610ad50152600081816105b4015281816109b40152610b550152600081816104240152818161077a01528181610ee801528181611501015281816116910152818161192301528181611b580152611c110152612a696000f3fe6080604052600436106102045760003560e01c806376c7a3c711610118578063a231d2e7116100a0578063bc70b3541161006f578063bc70b354146106c2578063ca5eb5e1146106e2578063d11808dc14610702578063f2fde38b14610738578063ff7bd03d1461075857600080fd5b8063a231d2e7146105e9578063b70773c014610609578063b98bd07014610675578063bb0b6a531461069557600080fd5b80638ec65810116100e75780638ec658101461054b57806391d20fa114610578578063966dfbd51461058b5780639748cf7c146105a25780639954e58d146105d657600080fd5b806376c7a3c7146104c65780637d25a05e146104dd57806382413eac146104fd5780638da5cb5b1461052d57600080fd5b80633e413bee1161019b5780635e280f111161016a5780635e280f111461041257806361bc221a146104465780636503fbc614610466578063715018a61461049c57806373d4a13a146104b157600080fd5b80633e413bee1461034c5780634191ea87146103985780634426b4f6146103ad5780635535d461146103e557600080fd5b80631d2633c3116101d75780631d2633c3146102b257806326c4f29d146102df57806327e235e3146102ff5780633400288b1461032c57600080fd5b806302d27bd81461020957806313137d651461025057806314bd4f5f1461026557806317442b7014610290575b600080fd5b34801561021557600080fd5b5061023d7f0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a581565b6040519081526020015b60405180910390f35b61026361025e366004611d63565b610778565b005b34801561027157600080fd5b5061027b6103e881565b60405163ffffffff9091168152602001610247565b34801561029c57600080fd5b5060408051600181526002602082015201610247565b3480156102be57600080fd5b5061023d6102cd366004611e02565b60076020526000908152604090205481565b6102f26102ed366004611e54565b610838565b6040516102479190611eb6565b34801561030b57600080fd5b5061023d61031a366004611e02565b60056020526000908152604090205481565b34801561033857600080fd5b50610263610347366004611ef8565b61088b565b34801561035857600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610247565b3480156103a457600080fd5b5061027b600581565b3480156103b957600080fd5b506103cd6103c8366004611f22565b6108a1565b6040516001600160401b039091168152602001610247565b3480156103f157600080fd5b50610405610400366004611f4d565b610cbc565b6040516102479190611fd0565b34801561041e57600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506004546103cd906001600160401b031681565b34801561047257600080fd5b50610380610481366004611f22565b6006602052600090815260409020546001600160a01b031681565b3480156104a857600080fd5b50610263610d61565b3480156104bd57600080fd5b50610405610d75565b3480156104d257600080fd5b5061023d620186a081565b3480156104e957600080fd5b506103cd6104f8366004611ef8565b610d82565b34801561050957600080fd5b5061051d610518366004611fe3565b610d8b565b6040519015158152602001610247565b34801561053957600080fd5b506000546001600160a01b0316610380565b34801561055757600080fd5b5061056b610566366004612057565b610da0565b60405161024791906120b1565b6102636105863660046120c8565b610edd565b34801561059757600080fd5b5061023d6298968081565b3480156105ae57600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b6102f26105e4366004612176565b6110f0565b3480156105f557600080fd5b5061056b6106043660046121c8565b6112da565b34801561061557600080fd5b50610658610624366004611e02565b6001600160a01b031660009081526007602090815260408083205460089092529091205490916001600160401b0390911690565b604080519283526001600160401b03909116602083015201610247565b34801561068157600080fd5b50610263610690366004612242565b611318565b3480156106a157600080fd5b5061023d6106b03660046122b6565b60016020526000908152604090205481565b3480156106ce57600080fd5b506104056106dd3660046122d1565b611332565b3480156106ee57600080fd5b506102636106fd366004611e02565b6114da565b34801561070e57600080fd5b506103cd61071d366004611e02565b6008602052600090815260409020546001600160401b031681565b34801561074457600080fd5b50610263610753366004611e02565b611560565b34801561076457600080fd5b5061051d6107733660046122fe565b61159e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146107c8576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b602087018035906107e2906107dd908a6122b6565b6115d4565b14610820576107f460208801886122b6565b60405163309afaf360e21b815263ffffffff9091166004820152602088013560248201526044016107bf565b61082f87878787878787611610565b50505050505050565b610840611ca7565b600061084b85611627565b9050600061085c8760018787611332565b9050610880878383604051806040016040528034815260200160008152503361165e565b979650505050505050565b61089361175e565b61089d828261178b565b5050565b60008082116108eb5760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206d757374206265206e6f6e7a65726f60501b60448201526064016107bf565b6000629896806108fe620186a085612330565b6109089190612347565b905060006109168285612369565b9050600081116109685760405162461bcd60e51b815260206004820181905260248201527f416d6f756e7420746f6f20736d616c6c2028666565203e3d20616d6f756e742960448201526064016107bf565b61099d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330876117e0565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a55919061237c565b905080610a9b5760405162461bcd60e51b815260206004820152601460248201527310d0d51408185c1c1c9bdd985b0819985a5b195960621b60448201526064016107bf565b6040805160248101879052600560448201527f0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a560648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166084830152600060a4830181905260c483018790526103e860e4808501919091528451808503909101815261010490930184526020830180516001600160e01b0316634701287760e11b179052925191929182917f00000000000000000000000000000000000000000000000000000000000000001690610b81908590612399565b6000604051808303816000865af19150503d8060008114610bbe576040519150601f19603f3d011682016040523d82523d6000602084013e610bc3565b606091505b509150915081610c0d5760405162461bcd60e51b815260206004820152601560248201527419195c1bdcda5d119bdc909d5c9b8819985a5b1959605a1b60448201526064016107bf565b805160009015610c2e5781806020019051810190610c2b91906123b5565b90505b3360008181526007602090815260408083208a90556008825291829020805467ffffffffffffffff19166001600160401b03861690811790915582518d81529182018a90529181018a9052600560608201529091907ff22f3dc03ed1eb7b368d6d642369e8aa2fa603867ed62665b12147023694ddb09060800160405180910390a398975050505050505050565b600260209081526000928352604080842090915290825290208054610ce0906123d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0c906123d2565b8015610d595780601f10610d2e57610100808354040283529160200191610d59565b820191906000526020600020905b815481529060010190602001808311610d3c57829003601f168201915b505050505081565b610d6961175e565b610d736000611840565b565b60038054610ce0906123d2565b60005b92915050565b6001600160a01b03811630145b949350505050565b60408051808201909152600080825260208201523360009081526007602052604090205480610e115760405162461bcd60e51b815260206004820152601760248201527f4e6f2070656e64696e672043435450206465706f73697400000000000000000060448201526064016107bf565b6001600160401b03811115610e645760405162461bcd60e51b8152602060048201526019602482015278082dadeeadce840caf0c6cacac8e640ead2dce86c6840dac2f603b1b60448201526064016107bf565b6000610e6f82611890565b33600081815260086020526040902054610e91906001600160401b0316611890565b604051602001610ea393929190612406565b60405160208183030381529060405290506000610ec38860018989611332565b9050610ed18883838861190d565b98975050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f555760405162461bcd60e51b815260206004820152601760248201527f4c5a3a2063616c6c6572206e6f7420656e64706f696e7400000000000000000060448201526064016107bf565b6000600984148015610f87575060028585600081610f7557610f75612452565b9050013560f81c60f81b60f81c60ff16145b156110035760005b6008811015610fe157610fa3816008612330565b6001600160401b03168686610fb9846001612468565b818110610fc857610fc8612452565b919091013560f81c90911b929092179150600101610f8f565b506004805467ffffffffffffffff19166001600160401b038316179055611075565b60088490036110755760005b600881101561105757611023816008612330565b6001600160401b031686868381811061103e5761103e612452565b919091013560f81c90911b92909217915060010161100f565b506004805467ffffffffffffffff19166001600160401b0383161790555b6000878152600660205260409020546001600160a01b031680156110e457600088815260066020908152604080832080546001600160a01b03191690556001600160a01b03841683526005909152812080546001600160401b03851692906110de908490612468565b90915550505b50505050505050505050565b6110f8611ca7565b33600090815260076020526040902054806111715760405162461bcd60e51b815260206004820152603360248201527f4e6f2070656e64696e672043435450206465706f7369742e2043616c6c2064656044820152723837b9b4ba2b34b0a1a1aa28103334b939ba1760691b60648201526084016107bf565b6001600160401b038111156111c45760405162461bcd60e51b8152602060048201526019602482015278082dadeeadce840caf0c6cacac8e640ead2dce86c6840dac2f603b1b60448201526064016107bf565b60006111cf82611890565b336000818152600860205260409020546111f1906001600160401b0316611890565b60405160200161120393929190612406565b604051602081830303815290604052905060006112238760018888611332565b9050611247878383604051806040016040528034815260200160008152503361165e565b8051600090815260066020908152604080832080546001600160a01b03191633908117909155808452600783528184208490556008835292819020805467ffffffffffffffff19169055835190518781529397509263ffffffff8b1692917fc5f436d590383fddc971d5bda9254311dda012429ed67a8c0415b144b4c3fea9910160405180910390a45050509392505050565b604080518082019091526000808252602082015260006112f986611627565b9050600061130a8860018888611332565b9050610ed18883838761190d565b61132061175e565b61089d61132d82846124e9565b6119ee565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190611366906123d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611392906123d2565b80156113df5780601f106113b4576101008083540402835291602001916113df565b820191906000526020600020905b8154815290600101906020018083116113c257829003601f168201915b50505050509050805160000361142f5783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610d989350505050565b600083900361143f579050610d98565b600283106114bd5761148684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b0092505050565b80611494846002818861260e565b6040516020016114a693929190612638565b604051602081830303815290604052915050610d98565b8383604051639a6d49cd60e01b81526004016107bf929190612660565b6114e261175e565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b15801561154557600080fd5b505af1158015611559573d6000803e3d6000fd5b5050505050565b61156861175e565b6001600160a01b03811661159257604051631e4fbdf760e01b8152600060048201526024016107bf565b61159b81611840565b50565b60006020820180359060019083906115b690866122b6565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff811660009081526001602052604081205480610d855760405163f6ff4fb760e01b815263ffffffff841660048201526024016107bf565b600361161d8587836126e0565b5050505050505050565b60408051600160f81b602082015260c09290921b6001600160c01b0319166021830152805160098184030181526029909201905290565b611666611ca7565b60006116758460000151611b2c565b60208501519091501561168f5761168f8460200151611b54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016116df8c6115d4565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b815260040161171b92919061279f565b60806040518083038185885af1158015611739573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108809190612866565b6000546001600160a01b03163314610d735760405163118cdaa760e01b81523360048201526024016107bf565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261183a908590611c36565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160088082528183019092526060916020820181803683370190505090508160005b6008811015611906578160ff1660f81b8382815181106118d7576118d7612452565b60200101906001600160f81b031916908160001a90535060089190911c66ffffffffffffff16906001016118b5565b5050919050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001611970896115d4565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016119a592919061279f565b6040805180830381865afa1580156119c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e591906128b0565b95945050505050565b60005b8151811015611ac557611a20828281518110611a0f57611a0f612452565b602002602001015160400151611b00565b818181518110611a3257611a32612452565b60200260200101516040015160026000848481518110611a5457611a54612452565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611a8e57611a8e612452565b60200260200101516020015161ffff1661ffff1681526020019081526020016000209081611abc91906128cc565b506001016119f1565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b67481604051611af5919061298b565b60405180910390a150565b600281015161ffff811660031461089d5781604051639a6d49cd60e01b81526004016107bf9190611fd0565b6000813414611b50576040516304fb820960e51b81523460048201526024016107bf565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612a16565b90506001600160a01b038116611c01576040516329b99a9560e11b815260040160405180910390fd5b61089d6001600160a01b038216337f0000000000000000000000000000000000000000000000000000000000000000856117e0565b600080602060008451602086016000885af180611c59576040513d6000823e3d81fd5b50506000513d91508115611c71578060011415611c7e565b6001600160a01b0384163b155b1561183a57604051635274afe760e01b81526001600160a01b03851660048201526024016107bf565b60405180606001604052806000801916815260200160006001600160401b03168152602001611ce9604051806040016040528060008152602001600081525090565b905290565b600060608284031215611d0057600080fd5b50919050565b60008083601f840112611d1857600080fd5b5081356001600160401b03811115611d2f57600080fd5b602083019150836020828501011115611d4757600080fd5b9250929050565b6001600160a01b038116811461159b57600080fd5b600080600080600080600060e0888a031215611d7e57600080fd5b611d888989611cee565b96506060880135955060808801356001600160401b0380821115611dab57600080fd5b611db78b838c01611d06565b909750955060a08a01359150611dcc82611d4e565b90935060c08901359080821115611de257600080fd5b50611def8a828b01611d06565b989b979a50959850939692959293505050565b600060208284031215611e1457600080fd5b8135611e1f81611d4e565b9392505050565b803563ffffffff81168114611e3a57600080fd5b919050565b6001600160401b038116811461159b57600080fd5b60008060008060608587031215611e6a57600080fd5b611e7385611e26565b93506020850135611e8381611e3f565b925060408501356001600160401b03811115611e9e57600080fd5b611eaa87828801611d06565b95989497509550505050565b6000608082019050825182526001600160401b0360208401511660208301526040830151611ef1604084018280518252602090810151910152565b5092915050565b60008060408385031215611f0b57600080fd5b611f1483611e26565b946020939093013593505050565b600060208284031215611f3457600080fd5b5035919050565b803561ffff81168114611e3a57600080fd5b60008060408385031215611f6057600080fd5b611f6983611e26565b9150611f7760208401611f3b565b90509250929050565b60005b83811015611f9b578181015183820152602001611f83565b50506000910152565b60008151808452611fbc816020860160208601611f80565b601f01601f19169290920160200192915050565b602081526000611e1f6020830184611fa4565b60008060008060a08587031215611ff957600080fd5b6120038686611cee565b935060608501356001600160401b0381111561201e57600080fd5b61202a87828801611d06565b909450925050608085013561203e81611d4e565b939692955090935050565b801515811461159b57600080fd5b6000806000806060858703121561206d57600080fd5b61207685611e26565b935060208501356001600160401b0381111561209157600080fd5b61209d87828801611d06565b909450925050604085013561203e81612049565b815181526020808301519082015260408101610d85565b60008060008060008060008060c0898b0312156120e457600080fd5b88356120ef81611d4e565b975060208901356120ff81611d4e565b96506040890135955061211460608a01611f3b565b945060808901356001600160401b038082111561213057600080fd5b61213c8c838d01611d06565b909650945060a08b013591508082111561215557600080fd5b506121628b828c01611d06565b999c989b5096995094979396929594505050565b60008060006040848603121561218b57600080fd5b61219484611e26565b925060208401356001600160401b038111156121af57600080fd5b6121bb86828701611d06565b9497909650939450505050565b6000806000806000608086880312156121e057600080fd5b6121e986611e26565b945060208601356121f981611e3f565b935060408601356001600160401b0381111561221457600080fd5b61222088828901611d06565b909450925050606086013561223481612049565b809150509295509295909350565b6000806020838503121561225557600080fd5b82356001600160401b038082111561226c57600080fd5b818501915085601f83011261228057600080fd5b81358181111561228f57600080fd5b8660208260051b85010111156122a457600080fd5b60209290920196919550909350505050565b6000602082840312156122c857600080fd5b611e1f82611e26565b600080600080606085870312156122e757600080fd5b6122f085611e26565b9350611e8360208601611f3b565b60006060828403121561231057600080fd5b611e1f8383611cee565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d8557610d8561231a565b60008261236457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610d8557610d8561231a565b60006020828403121561238e57600080fd5b8151611e1f81612049565b600082516123ab818460208701611f80565b9190910192915050565b6000602082840312156123c757600080fd5b8151611e1f81611e3f565b600181811c908216806123e657607f821691505b602082108103611d0057634e487b7160e01b600052602260045260246000fd5b60008451612418818460208901611f80565b606085901b6bffffffffffffffffffffffff19169083019081528351612445816014840160208801611f80565b0160140195945050505050565b634e487b7160e01b600052603260045260246000fd5b80820180821115610d8557610d8561231a565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156124b3576124b361247b565b60405290565b604051601f8201601f191681016001600160401b03811182821017156124e1576124e161247b565b604052919050565b60006001600160401b03808411156125035761250361247b565b8360051b60206125148183016124b9565b86815291850191818101903684111561252c57600080fd5b865b84811015612602578035868111156125465760008081fd5b8801606036829003121561255a5760008081fd5b612562612491565b61256b82611e26565b8152612578868301611f3b565b86820152604080830135898111156125905760008081fd5b9290920191601f36818501126125a65760008081fd5b83358a8111156125b8576125b861247b565b6125c9818301601f19168a016124b9565b915080825236898287010111156125e05760008081fd5b808986018a84013760009082018901529082015284525091830191830161252e565b50979650505050505050565b6000808585111561261e57600080fd5b8386111561262b57600080fd5b5050820193919092039150565b6000845161264a818460208901611f80565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b601f8211156126db576000816000526020600020601f850160051c810160208610156126b85750805b601f850160051c820191505b818110156126d7578281556001016126c4565b5050505b505050565b6001600160401b038311156126f7576126f761247b565b61270b8361270583546123d2565b8361268f565b6000601f84116001811461273f57600085156127275750838201355b600019600387901b1c1916600186901b178355611559565b600083815260209020601f19861690835b828110156127705786850135825560209485019460019092019101612750565b508682101561278d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526127d560e0840182611fa4565b90506060850151603f198483030160a08501526127f28282611fa4565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561282a57600080fd5b604051604081018181106001600160401b038211171561284c5761284c61247b565b604052825181526020928301519281019290925250919050565b60006080828403121561287857600080fd5b612880612491565b82518152602083015161289281611e3f565b60208201526128a48460408501612818565b60408201529392505050565b6000604082840312156128c257600080fd5b611e1f8383612818565b81516001600160401b038111156128e5576128e561247b565b6128f9816128f384546123d2565b8461268f565b602080601f83116001811461292e57600084156129165750858301515b600019600386901b1c1916600185901b1785556126d7565b600085815260208120601f198616915b8281101561295d5788860151825594840194600190910190840161293e565b508582101561297b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612a0857888303603f190185528151805163ffffffff1684528781015161ffff168885015286015160608785018190526129f481860183611fa4565b9689019694505050908601906001016129b4565b509098975050505050505050565b600060208284031215612a2857600080fd5b8151611e1f81611d4e56fea26469706673582212204fa2b257c3b0654dc11811f41fb059b36e87b7673abe65b18d409838ac3a09ec64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c806376c7a3c711610118578063a231d2e7116100a0578063bc70b3541161006f578063bc70b354146106c2578063ca5eb5e1146106e2578063d11808dc14610702578063f2fde38b14610738578063ff7bd03d1461075857600080fd5b8063a231d2e7146105e9578063b70773c014610609578063b98bd07014610675578063bb0b6a531461069557600080fd5b80638ec65810116100e75780638ec658101461054b57806391d20fa114610578578063966dfbd51461058b5780639748cf7c146105a25780639954e58d146105d657600080fd5b806376c7a3c7146104c65780637d25a05e146104dd57806382413eac146104fd5780638da5cb5b1461052d57600080fd5b80633e413bee1161019b5780635e280f111161016a5780635e280f111461041257806361bc221a146104465780636503fbc614610466578063715018a61461049c57806373d4a13a146104b157600080fd5b80633e413bee1461034c5780634191ea87146103985780634426b4f6146103ad5780635535d461146103e557600080fd5b80631d2633c3116101d75780631d2633c3146102b257806326c4f29d146102df57806327e235e3146102ff5780633400288b1461032c57600080fd5b806302d27bd81461020957806313137d651461025057806314bd4f5f1461026557806317442b7014610290575b600080fd5b34801561021557600080fd5b5061023d7f0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a581565b6040519081526020015b60405180910390f35b61026361025e366004611d63565b610778565b005b34801561027157600080fd5b5061027b6103e881565b60405163ffffffff9091168152602001610247565b34801561029c57600080fd5b5060408051600181526002602082015201610247565b3480156102be57600080fd5b5061023d6102cd366004611e02565b60076020526000908152604090205481565b6102f26102ed366004611e54565b610838565b6040516102479190611eb6565b34801561030b57600080fd5b5061023d61031a366004611e02565b60056020526000908152604090205481565b34801561033857600080fd5b50610263610347366004611ef8565b61088b565b34801561035857600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610247565b3480156103a457600080fd5b5061027b600581565b3480156103b957600080fd5b506103cd6103c8366004611f22565b6108a1565b6040516001600160401b039091168152602001610247565b3480156103f157600080fd5b50610405610400366004611f4d565b610cbc565b6040516102479190611fd0565b34801561041e57600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b34801561045257600080fd5b506004546103cd906001600160401b031681565b34801561047257600080fd5b50610380610481366004611f22565b6006602052600090815260409020546001600160a01b031681565b3480156104a857600080fd5b50610263610d61565b3480156104bd57600080fd5b50610405610d75565b3480156104d257600080fd5b5061023d620186a081565b3480156104e957600080fd5b506103cd6104f8366004611ef8565b610d82565b34801561050957600080fd5b5061051d610518366004611fe3565b610d8b565b6040519015158152602001610247565b34801561053957600080fd5b506000546001600160a01b0316610380565b34801561055757600080fd5b5061056b610566366004612057565b610da0565b60405161024791906120b1565b6102636105863660046120c8565b610edd565b34801561059757600080fd5b5061023d6298968081565b3480156105ae57600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b6102f26105e4366004612176565b6110f0565b3480156105f557600080fd5b5061056b6106043660046121c8565b6112da565b34801561061557600080fd5b50610658610624366004611e02565b6001600160a01b031660009081526007602090815260408083205460089092529091205490916001600160401b0390911690565b604080519283526001600160401b03909116602083015201610247565b34801561068157600080fd5b50610263610690366004612242565b611318565b3480156106a157600080fd5b5061023d6106b03660046122b6565b60016020526000908152604090205481565b3480156106ce57600080fd5b506104056106dd3660046122d1565b611332565b3480156106ee57600080fd5b506102636106fd366004611e02565b6114da565b34801561070e57600080fd5b506103cd61071d366004611e02565b6008602052600090815260409020546001600160401b031681565b34801561074457600080fd5b50610263610753366004611e02565b611560565b34801561076457600080fd5b5061051d6107733660046122fe565b61159e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146107c8576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b602087018035906107e2906107dd908a6122b6565b6115d4565b14610820576107f460208801886122b6565b60405163309afaf360e21b815263ffffffff9091166004820152602088013560248201526044016107bf565b61082f87878787878787611610565b50505050505050565b610840611ca7565b600061084b85611627565b9050600061085c8760018787611332565b9050610880878383604051806040016040528034815260200160008152503361165e565b979650505050505050565b61089361175e565b61089d828261178b565b5050565b60008082116108eb5760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206d757374206265206e6f6e7a65726f60501b60448201526064016107bf565b6000629896806108fe620186a085612330565b6109089190612347565b905060006109168285612369565b9050600081116109685760405162461bcd60e51b815260206004820181905260248201527f416d6f756e7420746f6f20736d616c6c2028666565203e3d20616d6f756e742960448201526064016107bf565b61099d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330876117e0565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a55919061237c565b905080610a9b5760405162461bcd60e51b815260206004820152601460248201527310d0d51408185c1c1c9bdd985b0819985a5b195960621b60448201526064016107bf565b6040805160248101879052600560448201527f0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a560648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166084830152600060a4830181905260c483018790526103e860e4808501919091528451808503909101815261010490930184526020830180516001600160e01b0316634701287760e11b179052925191929182917f00000000000000000000000000000000000000000000000000000000000000001690610b81908590612399565b6000604051808303816000865af19150503d8060008114610bbe576040519150601f19603f3d011682016040523d82523d6000602084013e610bc3565b606091505b509150915081610c0d5760405162461bcd60e51b815260206004820152601560248201527419195c1bdcda5d119bdc909d5c9b8819985a5b1959605a1b60448201526064016107bf565b805160009015610c2e5781806020019051810190610c2b91906123b5565b90505b3360008181526007602090815260408083208a90556008825291829020805467ffffffffffffffff19166001600160401b03861690811790915582518d81529182018a90529181018a9052600560608201529091907ff22f3dc03ed1eb7b368d6d642369e8aa2fa603867ed62665b12147023694ddb09060800160405180910390a398975050505050505050565b600260209081526000928352604080842090915290825290208054610ce0906123d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0c906123d2565b8015610d595780601f10610d2e57610100808354040283529160200191610d59565b820191906000526020600020905b815481529060010190602001808311610d3c57829003601f168201915b505050505081565b610d6961175e565b610d736000611840565b565b60038054610ce0906123d2565b60005b92915050565b6001600160a01b03811630145b949350505050565b60408051808201909152600080825260208201523360009081526007602052604090205480610e115760405162461bcd60e51b815260206004820152601760248201527f4e6f2070656e64696e672043435450206465706f73697400000000000000000060448201526064016107bf565b6001600160401b03811115610e645760405162461bcd60e51b8152602060048201526019602482015278082dadeeadce840caf0c6cacac8e640ead2dce86c6840dac2f603b1b60448201526064016107bf565b6000610e6f82611890565b33600081815260086020526040902054610e91906001600160401b0316611890565b604051602001610ea393929190612406565b60405160208183030381529060405290506000610ec38860018989611332565b9050610ed18883838861190d565b98975050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f555760405162461bcd60e51b815260206004820152601760248201527f4c5a3a2063616c6c6572206e6f7420656e64706f696e7400000000000000000060448201526064016107bf565b6000600984148015610f87575060028585600081610f7557610f75612452565b9050013560f81c60f81b60f81c60ff16145b156110035760005b6008811015610fe157610fa3816008612330565b6001600160401b03168686610fb9846001612468565b818110610fc857610fc8612452565b919091013560f81c90911b929092179150600101610f8f565b506004805467ffffffffffffffff19166001600160401b038316179055611075565b60088490036110755760005b600881101561105757611023816008612330565b6001600160401b031686868381811061103e5761103e612452565b919091013560f81c90911b92909217915060010161100f565b506004805467ffffffffffffffff19166001600160401b0383161790555b6000878152600660205260409020546001600160a01b031680156110e457600088815260066020908152604080832080546001600160a01b03191690556001600160a01b03841683526005909152812080546001600160401b03851692906110de908490612468565b90915550505b50505050505050505050565b6110f8611ca7565b33600090815260076020526040902054806111715760405162461bcd60e51b815260206004820152603360248201527f4e6f2070656e64696e672043435450206465706f7369742e2043616c6c2064656044820152723837b9b4ba2b34b0a1a1aa28103334b939ba1760691b60648201526084016107bf565b6001600160401b038111156111c45760405162461bcd60e51b8152602060048201526019602482015278082dadeeadce840caf0c6cacac8e640ead2dce86c6840dac2f603b1b60448201526064016107bf565b60006111cf82611890565b336000818152600860205260409020546111f1906001600160401b0316611890565b60405160200161120393929190612406565b604051602081830303815290604052905060006112238760018888611332565b9050611247878383604051806040016040528034815260200160008152503361165e565b8051600090815260066020908152604080832080546001600160a01b03191633908117909155808452600783528184208490556008835292819020805467ffffffffffffffff19169055835190518781529397509263ffffffff8b1692917fc5f436d590383fddc971d5bda9254311dda012429ed67a8c0415b144b4c3fea9910160405180910390a45050509392505050565b604080518082019091526000808252602082015260006112f986611627565b9050600061130a8860018888611332565b9050610ed18883838761190d565b61132061175e565b61089d61132d82846124e9565b6119ee565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190611366906123d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611392906123d2565b80156113df5780601f106113b4576101008083540402835291602001916113df565b820191906000526020600020905b8154815290600101906020018083116113c257829003601f168201915b50505050509050805160000361142f5783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610d989350505050565b600083900361143f579050610d98565b600283106114bd5761148684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b0092505050565b80611494846002818861260e565b6040516020016114a693929190612638565b604051602081830303815290604052915050610d98565b8383604051639a6d49cd60e01b81526004016107bf929190612660565b6114e261175e565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b15801561154557600080fd5b505af1158015611559573d6000803e3d6000fd5b5050505050565b61156861175e565b6001600160a01b03811661159257604051631e4fbdf760e01b8152600060048201526024016107bf565b61159b81611840565b50565b60006020820180359060019083906115b690866122b6565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff811660009081526001602052604081205480610d855760405163f6ff4fb760e01b815263ffffffff841660048201526024016107bf565b600361161d8587836126e0565b5050505050505050565b60408051600160f81b602082015260c09290921b6001600160c01b0319166021830152805160098184030181526029909201905290565b611666611ca7565b60006116758460000151611b2c565b60208501519091501561168f5761168f8460200151611b54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016116df8c6115d4565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b815260040161171b92919061279f565b60806040518083038185885af1158015611739573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108809190612866565b6000546001600160a01b03163314610d735760405163118cdaa760e01b81523360048201526024016107bf565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261183a908590611c36565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160088082528183019092526060916020820181803683370190505090508160005b6008811015611906578160ff1660f81b8382815181106118d7576118d7612452565b60200101906001600160f81b031916908160001a90535060089190911c66ffffffffffffff16906001016118b5565b5050919050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001611970896115d4565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016119a592919061279f565b6040805180830381865afa1580156119c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e591906128b0565b95945050505050565b60005b8151811015611ac557611a20828281518110611a0f57611a0f612452565b602002602001015160400151611b00565b818181518110611a3257611a32612452565b60200260200101516040015160026000848481518110611a5457611a54612452565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611a8e57611a8e612452565b60200260200101516020015161ffff1661ffff1681526020019081526020016000209081611abc91906128cc565b506001016119f1565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b67481604051611af5919061298b565b60405180910390a150565b600281015161ffff811660031461089d5781604051639a6d49cd60e01b81526004016107bf9190611fd0565b6000813414611b50576040516304fb820960e51b81523460048201526024016107bf565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612a16565b90506001600160a01b038116611c01576040516329b99a9560e11b815260040160405180910390fd5b61089d6001600160a01b038216337f0000000000000000000000000000000000000000000000000000000000000000856117e0565b600080602060008451602086016000885af180611c59576040513d6000823e3d81fd5b50506000513d91508115611c71578060011415611c7e565b6001600160a01b0384163b155b1561183a57604051635274afe760e01b81526001600160a01b03851660048201526024016107bf565b60405180606001604052806000801916815260200160006001600160401b03168152602001611ce9604051806040016040528060008152602001600081525090565b905290565b600060608284031215611d0057600080fd5b50919050565b60008083601f840112611d1857600080fd5b5081356001600160401b03811115611d2f57600080fd5b602083019150836020828501011115611d4757600080fd5b9250929050565b6001600160a01b038116811461159b57600080fd5b600080600080600080600060e0888a031215611d7e57600080fd5b611d888989611cee565b96506060880135955060808801356001600160401b0380821115611dab57600080fd5b611db78b838c01611d06565b909750955060a08a01359150611dcc82611d4e565b90935060c08901359080821115611de257600080fd5b50611def8a828b01611d06565b989b979a50959850939692959293505050565b600060208284031215611e1457600080fd5b8135611e1f81611d4e565b9392505050565b803563ffffffff81168114611e3a57600080fd5b919050565b6001600160401b038116811461159b57600080fd5b60008060008060608587031215611e6a57600080fd5b611e7385611e26565b93506020850135611e8381611e3f565b925060408501356001600160401b03811115611e9e57600080fd5b611eaa87828801611d06565b95989497509550505050565b6000608082019050825182526001600160401b0360208401511660208301526040830151611ef1604084018280518252602090810151910152565b5092915050565b60008060408385031215611f0b57600080fd5b611f1483611e26565b946020939093013593505050565b600060208284031215611f3457600080fd5b5035919050565b803561ffff81168114611e3a57600080fd5b60008060408385031215611f6057600080fd5b611f6983611e26565b9150611f7760208401611f3b565b90509250929050565b60005b83811015611f9b578181015183820152602001611f83565b50506000910152565b60008151808452611fbc816020860160208601611f80565b601f01601f19169290920160200192915050565b602081526000611e1f6020830184611fa4565b60008060008060a08587031215611ff957600080fd5b6120038686611cee565b935060608501356001600160401b0381111561201e57600080fd5b61202a87828801611d06565b909450925050608085013561203e81611d4e565b939692955090935050565b801515811461159b57600080fd5b6000806000806060858703121561206d57600080fd5b61207685611e26565b935060208501356001600160401b0381111561209157600080fd5b61209d87828801611d06565b909450925050604085013561203e81612049565b815181526020808301519082015260408101610d85565b60008060008060008060008060c0898b0312156120e457600080fd5b88356120ef81611d4e565b975060208901356120ff81611d4e565b96506040890135955061211460608a01611f3b565b945060808901356001600160401b038082111561213057600080fd5b61213c8c838d01611d06565b909650945060a08b013591508082111561215557600080fd5b506121628b828c01611d06565b999c989b5096995094979396929594505050565b60008060006040848603121561218b57600080fd5b61219484611e26565b925060208401356001600160401b038111156121af57600080fd5b6121bb86828701611d06565b9497909650939450505050565b6000806000806000608086880312156121e057600080fd5b6121e986611e26565b945060208601356121f981611e3f565b935060408601356001600160401b0381111561221457600080fd5b61222088828901611d06565b909450925050606086013561223481612049565b809150509295509295909350565b6000806020838503121561225557600080fd5b82356001600160401b038082111561226c57600080fd5b818501915085601f83011261228057600080fd5b81358181111561228f57600080fd5b8660208260051b85010111156122a457600080fd5b60209290920196919550909350505050565b6000602082840312156122c857600080fd5b611e1f82611e26565b600080600080606085870312156122e757600080fd5b6122f085611e26565b9350611e8360208601611f3b565b60006060828403121561231057600080fd5b611e1f8383611cee565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d8557610d8561231a565b60008261236457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610d8557610d8561231a565b60006020828403121561238e57600080fd5b8151611e1f81612049565b600082516123ab818460208701611f80565b9190910192915050565b6000602082840312156123c757600080fd5b8151611e1f81611e3f565b600181811c908216806123e657607f821691505b602082108103611d0057634e487b7160e01b600052602260045260246000fd5b60008451612418818460208901611f80565b606085901b6bffffffffffffffffffffffff19169083019081528351612445816014840160208801611f80565b0160140195945050505050565b634e487b7160e01b600052603260045260246000fd5b80820180821115610d8557610d8561231a565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156124b3576124b361247b565b60405290565b604051601f8201601f191681016001600160401b03811182821017156124e1576124e161247b565b604052919050565b60006001600160401b03808411156125035761250361247b565b8360051b60206125148183016124b9565b86815291850191818101903684111561252c57600080fd5b865b84811015612602578035868111156125465760008081fd5b8801606036829003121561255a5760008081fd5b612562612491565b61256b82611e26565b8152612578868301611f3b565b86820152604080830135898111156125905760008081fd5b9290920191601f36818501126125a65760008081fd5b83358a8111156125b8576125b861247b565b6125c9818301601f19168a016124b9565b915080825236898287010111156125e05760008081fd5b808986018a84013760009082018901529082015284525091830191830161252e565b50979650505050505050565b6000808585111561261e57600080fd5b8386111561262b57600080fd5b5050820193919092039150565b6000845161264a818460208901611f80565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b601f8211156126db576000816000526020600020601f850160051c810160208610156126b85750805b601f850160051c820191505b818110156126d7578281556001016126c4565b5050505b505050565b6001600160401b038311156126f7576126f761247b565b61270b8361270583546123d2565b8361268f565b6000601f84116001811461273f57600085156127275750838201355b600019600387901b1c1916600186901b178355611559565b600083815260209020601f19861690835b828110156127705786850135825560209485019460019092019101612750565b508682101561278d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526127d560e0840182611fa4565b90506060850151603f198483030160a08501526127f28282611fa4565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561282a57600080fd5b604051604081018181106001600160401b038211171561284c5761284c61247b565b604052825181526020928301519281019290925250919050565b60006080828403121561287857600080fd5b612880612491565b82518152602083015161289281611e3f565b60208201526128a48460408501612818565b60408201529392505050565b6000604082840312156128c257600080fd5b611e1f8383612818565b81516001600160401b038111156128e5576128e561247b565b6128f9816128f384546123d2565b8461268f565b602080601f83116001811461292e57600084156129165750858301515b600019600386901b1c1916600185901b1785556126d7565b600085815260208120601f198616915b8281101561295d5788860151825594840194600190910190840161293e565b508582101561297b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612a0857888303603f190185528151805163ffffffff1684528781015161ffff168885015286015160608785018190526129f481860183611fa4565b9689019694505050908601906001016129b4565b509098975050505050505050565b600060208284031215612a2857600080fd5b8151611e1f81611d4e56fea26469706673582212204fa2b257c3b0654dc11811f41fb059b36e87b7673abe65b18d409838ac3a09ec64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "CctpDepositInitiated(address,uint256,uint256,uint256,uint64,uint32)": {
        "params": {
          "cctpNonce": "CCTP nonce for attestation tracking",
          "depositAmount": "Amount of USDC deposited by user (before fees)",
          "destinationDomain": "CCTP destination domain (Solana = 5)",
          "fee": "CCTP Fast Transfer fee charged",
          "mintedAmount": "Amount of USDC that will be minted on Solana (after fees)",
          "user": "Address of the depositor"
        }
      },
      "DepositFinalized(address,uint256,uint32,bytes32)": {
        "params": {
          "amount": "Amount sent via LayerZero",
          "dstEid": "LayerZero destination endpoint ID",
          "guid": "LayerZero message GUID",
          "user": "Address of the depositor"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "depositViaCCTP(uint256)": {
        "details": "Combines: transferFrom → approve → depositForBurnCalculates actual minted amount after CCTP Fast Transfer fee (1 bps = 0.01%)",
        "params": {
          "_amount": "Amount of USDC to bridge to Solana (before fees)"
        },
        "returns": {
          "_0": "nonce CCTP nonce for tracking the cross-chain message"
        }
      },
      "getPendingDeposit(address)": {
        "params": {
          "_user": "User address to check"
        },
        "returns": {
          "amount": "Pending CCTP deposit amount",
          "nonce": "CCTP nonce of the deposit"
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteDeposit(uint32,bytes,bool)": {
        "details": "Quotes based on the user's pending CCTP deposit amount",
        "params": {
          "_dstEid": "LayerZero destination endpoint ID",
          "_options": "LayerZero execution options",
          "_payInLzToken": "Whether to pay fee in LZ token"
        },
        "returns": {
          "fee": "Estimated messaging fee"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "requestDeposit(uint32,bytes)": {
        "details": "User signs this transaction AFTER bot has submitted CCTP attestation on Solana.This function uses the amount from the user's CCTP deposit (security: prevents amount mismatch).If user has NO pending CCTP deposit, this function acts as legacy direct deposit (for testing).",
        "params": {
          "_dstEid": "LayerZero destination endpoint ID (Solana = 40168)",
          "_options": "LayerZero execution options (gas, etc.)"
        },
        "returns": {
          "receipt": "LayerZero messaging receipt"
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "FAST_TRANSFER_THRESHOLD": {
        "details": "1000 = Confirmed (~10-30 seconds), 2000 = Finalized (~13-19 minutes)"
      },
      "MIN_FEE": {
        "details": "Base Sepolia Fast Transfer fee: 1 bps (0.01%) = 100_000 in 1/1000 basis pointsFee formula: fee = (amount * MIN_FEE) / MIN_FEE_MULTIPLIER"
      },
      "SOLANA_DOMAIN": {
        "details": "Solana domain: 5"
      },
      "STORE_SOLANA_USDC_ATA": {
        "details": "Base58: MHso38U1uo8br3gSU6bXKC8apXorKzfwPqMVgYaKCmaHex: 0x0532b299adf7feeff0684579095c83982f2998b494fd93a5ae188fbcbfee74a5NO CONVERSION NEEDED! Solana addresses are already 32 bytes. Pass directly to depositForBurn."
      },
      "cctpDeposits": {
        "details": "This is the net amount user will receive on Solana (depositAmount - cctpFee)Security: Ensures user can only send LayerZero message for amount they actually receive"
      },
      "cctpNonces": {
        "details": "Used for bot to correlate CCTP attestation with user"
      },
      "cctpTokenMessenger": {
        "details": "Base Sepolia TokenMessengerV2: 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAAThis is the contract we need to approve USDC for (it calls transferFrom)"
      },
      "usdc": {
        "details": "Base Sepolia USDC: 0x036CbD53842c5426634e7929541eC2318f3dCF7e"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CctpDepositInitiated(address,uint256,uint256,uint256,uint64,uint32)": {
        "notice": "Emitted when user initiates CCTP deposit"
      },
      "DepositFinalized(address,uint256,uint32,bytes32)": {
        "notice": "Emitted when user finalizes deposit by sending LayerZero message"
      }
    },
    "kind": "user",
    "methods": {
      "FAST_TRANSFER_THRESHOLD()": {
        "notice": "Fast Transfer finality threshold for CCTP V2"
      },
      "MIN_FEE()": {
        "notice": "CCTP V2 Fee Calculation Constants"
      },
      "SOLANA_DOMAIN()": {
        "notice": "Solana domain identifier for CCTP V2"
      },
      "STORE_SOLANA_USDC_ATA()": {
        "notice": "Store's USDC ATA on Solana (hex-encoded 32-byte address)"
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "cctpDeposits(address)": {
        "notice": "Track CCTP deposits: user => ACTUAL amount that will be minted on Solana (after fees)"
      },
      "cctpNonces(address)": {
        "notice": "Track CCTP nonces for each user's deposit"
      },
      "cctpTokenMessenger()": {
        "notice": "Circle's CCTP V2 TokenMessenger contract on Base Sepolia"
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "depositViaCCTP(uint256)": {
        "notice": "Complete CCTP deposit flow in one transaction"
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "getPendingDeposit(address)": {
        "notice": "Get the pending CCTP deposit amount for a user"
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quoteDeposit(uint32,bytes,bool)": {
        "notice": "Quote the LayerZero fee for requestDeposit"
      },
      "requestDeposit(uint32,bytes)": {
        "notice": "Step 2: Send LayerZero message to finalize deposit on Solana"
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "usdc()": {
        "notice": "USDC token contract on Base Sepolia"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1533,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 785,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1381,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 2400,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "data",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2402,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "counter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 2406,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2410,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "pendingSender",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2442,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "cctpDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2447,
        "contract": "contracts/MyOApp.sol:MyOApp",
        "label": "cctpNonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}