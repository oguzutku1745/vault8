"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStoreAccountDataSerializer = getStoreAccountDataSerializer;
exports.deserializeStore = deserializeStore;
exports.fetchStore = fetchStore;
exports.safeFetchStore = safeFetchStore;
exports.fetchAllStore = fetchAllStore;
exports.safeFetchAllStore = safeFetchAllStore;
exports.getStoreGpaBuilder = getStoreGpaBuilder;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getStoreAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.bytes)({ size: 8 })],
        ['admin', (0, serializers_1.publicKey)()],
        ['bump', (0, serializers_1.u8)()],
        ['endpointProgram', (0, serializers_1.publicKey)()],
        ['string', (0, serializers_1.string)()],
    ], { description: 'StoreAccountData' }), (value) => ({
        ...value,
        discriminator: new Uint8Array([130, 48, 247, 244, 182, 191, 30, 26]),
    }));
}
function deserializeStore(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getStoreAccountDataSerializer());
}
async function fetchStore(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'Store');
    return deserializeStore(maybeAccount);
}
async function safeFetchStore(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeStore(maybeAccount) : null;
}
async function fetchAllStore(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'Store');
        return deserializeStore(maybeAccount);
    });
}
async function safeFetchAllStore(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeStore(maybeAccount));
}
function getStoreGpaBuilder(context) {
    const programId = context.programs.getPublicKey('myOapp', 'HFyiETGKEUS9tr87K1HXmVJHkqQRtw8wShRNTMkKKxay');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.bytes)({ size: 8 })],
        admin: [8, (0, serializers_1.publicKey)()],
        bump: [40, (0, serializers_1.u8)()],
        endpointProgram: [41, (0, serializers_1.publicKey)()],
        string: [73, (0, serializers_1.string)()],
    })
        .deserializeUsing((account) => deserializeStore(account))
        .whereField('discriminator', new Uint8Array([130, 48, 247, 244, 182, 191, 30, 26]));
}
